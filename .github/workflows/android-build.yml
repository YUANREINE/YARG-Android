name = "Android CI (Pull Request Auto-Build)"

on {
    pull_request {}
}

jobs {
    "build" {
        runsOn = "ubuntu-latest"

        steps {
            // 1️⃣ Checkout the repository code
            +step("Checkout Code") {
                uses = "actions/checkout@v4"
            }

            // 2️⃣ Set up Java JDK 17
            +step("Set up JDK 17") {
                uses = "actions/setup-java@v4"
                with = mapOf(
                    "distribution" to "temurin",
                    "java-version" to "17"
                )
            }

            // 3️⃣ Install Android SDK
            +step("Install Android SDK") {
                run = """
                    sudo apt-get update
                    sudo apt-get install -y openjdk-17-jdk unzip wget adb

                    wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdline-tools.zip
                    mkdir -p $ANDROID_HOME/cmdline-tools
                    unzip cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
                    mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest

                    yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
                    $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0" "system-images;android-30;google_apis;x86_64"
                """.trimIndent()
            }

            // 4️⃣ Install Latest Gradle
            +step("Install Latest Gradle") {
                run = """
                    wget https://services.gradle.org/distributions/gradle-8.6-bin.zip -O gradle.zip
                    sudo mkdir -p /opt/gradle
                    sudo unzip -d /opt/gradle gradle.zip
                    echo "export PATH=/opt/gradle/gradle-8.6/bin:$PATH" >> $HOME/.bashrc
                    source $HOME/.bashrc
                    gradle --version
                """.trimIndent()
            }

            // 5️⃣ Cache Gradle Dependencies
            +step("Cache Gradle Dependencies") {
                uses = "actions/cache@v4"
                with = mapOf(
                    "path" to """
                        ~/.gradle/caches
                        ~/.gradle/wrapper
                    """.trimIndent(),
                    "key" to "gradle-\${{ runner.os }}-\${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}",
                    "restore-keys" to "gradle-\${{ runner.os }}-"
                )
            }

            // 6️⃣ Build Debug APK (No Keystore Needed)
            +step("Build Debug APK") {
                run = "/opt/gradle/gradle-8.6/bin/gradle assembleDebug --stacktrace --no-daemon"
            }

            // 7️⃣ Upload Debug APK
            +step("Upload Debug APK") {
                uses = "actions/upload-artifact@v4"
                with = mapOf(
                    "name" to "Debug-APK",
                    "path" to "app/build/outputs/apk/debug/app-debug.apk"
                )
            }
        }
    }
}
